# Generated by Django 5.1.1 on 2025-01-13 00:23

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import mainApplication.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='adminPermissions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kitBienvenida', models.BooleanField(default=False)),
                ('kitBienvenidaAll', models.BooleanField(default=False)),
                ('kitBienvenidaOnlyPayment', models.BooleanField(default=False)),
                ('kitBienvenidaSchoolarships', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='CongressDate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(unique=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['date'],
            },
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('capacity', models.PositiveIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='TopicArea',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('isReviewer', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, max_length=5000)),
                ('date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('event_type', models.CharField(choices=[('ieee', 'IEEE Article'), ('springer', 'Springer Article'), ('keynote', 'Keynote'), ('lunch', 'Lunch'), ('workshop', 'Workshop'), ('other', 'Other')], default='other', max_length=50)),
                ('ponent_name', models.CharField(blank=True, max_length=255)),
                ('affiliation', models.CharField(blank=True, max_length=255)),
                ('moderator', models.CharField(blank=True, max_length=255)),
                ('banner', models.ImageField(blank=True, null=True, upload_to='event_banners/')),
                ('links', models.CharField(blank=True, default=' ', max_length=255, null=True, verbose_name='Links of online meeting: ')),
                ('requisites', models.CharField(blank=True, default=' ', max_length=1000, null=True, verbose_name='Requisites: ')),
                ('allEvent', models.BooleanField(default=False, verbose_name='This event last all the congress? ')),
                ('fileDiplomas', models.FileField(blank=True, null=True, upload_to='diplomasTemplates/')),
                ('place', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mainApplication.place')),
            ],
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submission_id', models.CharField(default=mainApplication.models.generate_random_submission_id, max_length=6, unique=True)),
                ('title', models.CharField(max_length=255)),
                ('publication_type', models.CharField(choices=[('IEEE', 'IEEE'), ('Springer', 'Springer')], max_length=50)),
                ('keywords', models.TextField(help_text='Comma-separated keywords.')),
                ('abstract', models.TextField()),
                ('comments', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to=settings.AUTH_USER_MODEL)),
                ('topic_areas', models.ManyToManyField(related_name='submissions', to='mainApplication.topicarea')),
            ],
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('honorific', models.CharField(blank=True, choices=[('Mr.', 'Mr.'), ('Ms.', 'Ms.'), ('Dr.', 'Dr.'), ('Prof.', 'Prof.')], max_length=10, null=True)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('position_title', models.CharField(blank=True, max_length=150, null=True)),
                ('organization', models.CharField(max_length=200)),
                ('department', models.CharField(blank=True, max_length=150, null=True)),
                ('address', models.TextField()),
                ('city', models.CharField(max_length=100)),
                ('state_province', models.CharField(max_length=100)),
                ('postcode_zip', models.CharField(max_length=20)),
                ('email', models.EmailField(max_length=254)),
                ('submission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='authors', to='mainApplication.submission')),
            ],
        ),
        migrations.CreateModel(
            name='SubmissionFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='submissions/%Y/%m/%d/')),
                ('description', models.TextField(blank=True, null=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('submission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='mainApplication.submission')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female')], max_length=10)),
                ('state', models.CharField(max_length=100)),
                ('country', django_countries.fields.CountryField(max_length=2)),
                ('university_name', models.CharField(max_length=255)),
                ('university_address', models.CharField(max_length=255)),
                ('user_type', models.CharField(choices=[('author', 'Author'), ('public', 'General Public'), ('student', 'Student')], max_length=20)),
                ('payment_completed', models.BooleanField(default=0)),
                ('payment_observarions', models.CharField(blank=True, default=' ', max_length=255, null=True)),
                ('transactionID', models.CharField(blank=True, default=' ', max_length=255, null=True)),
                ('recibioKIT', models.BooleanField(default=False)),
                ('permitirRegistro', models.BooleanField(default=False)),
                ('FullName', models.CharField(blank=True, max_length=255, null=True, verbose_name='Full Name (The name you write will be the one under which your certificates will be issued)')),
                ('manualPayment', models.BooleanField(default=False)),
                ('amount', models.CharField(blank=True, default=' ', max_length=255, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PaymentProof',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='payment_proofs/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('rejected', models.BooleanField(default=False)),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mainApplication.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='Registration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('assisted', models.BooleanField(default=False)),
                ('counter', models.IntegerField(default=0)),
                ('receivedDiploma', models.BooleanField(default=False)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mainApplication.event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'event')},
            },
        ),
    ]
